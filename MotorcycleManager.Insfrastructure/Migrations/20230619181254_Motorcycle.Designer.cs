// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorcycleManager.Infrastructure.Context;

#nullable disable

namespace MotorcycleManager.Infrastructure.Migrations
{
    [DbContext(typeof(MotorcycleManagerContext))]
    [Migration("20230619181254_Motorcycle")]
    partial class Motorcycle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MotorcycleManager.Domain.Models.MotorcycleEntity", b =>
                {
                    b.Property<int>("MotorcycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MotorcycleId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MotorcycleId");

                    b.ToTable("Motorcycle", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Models.MotorcycleCrossEntity", b =>
                {
                    b.HasBaseType("MotorcycleManager.Domain.Models.MotorcycleEntity");

                    b.Property<bool>("HasRearSuspension")
                        .HasColumnType("bit");

                    b.Property<int>("SeatHeight")
                        .HasColumnType("int");

                    b.ToTable("MotorcycleCross", (string)null);
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Models.MotorcycleSportsEntity", b =>
                {
                    b.HasBaseType("MotorcycleManager.Domain.Models.MotorcycleEntity");

                    b.Property<bool>("HasAleron")
                        .HasColumnType("bit");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.ToTable("MotorcycleSports", (string)null);
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Models.MotorcycleTourismEntity", b =>
                {
                    b.HasBaseType("MotorcycleManager.Domain.Models.MotorcycleEntity");

                    b.Property<bool>("HasSideCases")
                        .HasColumnType("bit");

                    b.Property<int>("TankCapacity")
                        .HasColumnType("int");

                    b.ToTable("MotorcycleTourism", (string)null);
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Models.MotorcycleCrossEntity", b =>
                {
                    b.HasOne("MotorcycleManager.Domain.Models.MotorcycleEntity", null)
                        .WithOne()
                        .HasForeignKey("MotorcycleManager.Domain.Models.MotorcycleCrossEntity", "MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Models.MotorcycleSportsEntity", b =>
                {
                    b.HasOne("MotorcycleManager.Domain.Models.MotorcycleEntity", null)
                        .WithOne()
                        .HasForeignKey("MotorcycleManager.Domain.Models.MotorcycleSportsEntity", "MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotorcycleManager.Domain.Models.MotorcycleTourismEntity", b =>
                {
                    b.HasOne("MotorcycleManager.Domain.Models.MotorcycleEntity", null)
                        .WithOne()
                        .HasForeignKey("MotorcycleManager.Domain.Models.MotorcycleTourismEntity", "MotorcycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
